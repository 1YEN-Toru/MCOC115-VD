//
//	blky2mcvm run time library
//		(c) 2024	1YEN Toru
//
//
//		2024/09/07	ver.1.04
//			add: _strfcmp_r1_r2, _strchr_r0_r1, _strofst_r1_r0
//
//		2024/08/31	ver.1.02
//			fix: _getl_det_baud: save r0 value
//
//		2024/07/27	ver.1.00
//


equ		_rtlb_vers,0x0104				// beta(1),major(1),minor(2)


# constants
equ		low,0							// LOW / HIGH level
equ		high,1
equ		_rtlb_max_intl,0x7fff_ffff		// cpu: int32: maximum number
equ		_rtlb_max_intw,0x7fff			// cpu: int16: maximum number
equ		_rtlb_min_intl,0x8000_0000		// cpu: int32: minimum number
equ		_rtlb_min_intw,0x8000			// cpu: int16: minimum number
equ		_rtlb_infl,sngl_inf				// fpu: float: infinite number
equ		_rtlb_infw,half_inf				// fpu: half: infinite number
equ		_rtlb_nanl,sngl_nan				// fpu: float: not a number
equ		_rtlb_nanw,half_nan				// fpu: half: not a number
equ		_rtlb_sytmtckl,sytmtckh			// iorg: systim i/o register
equ		_rtlb_sytmtckw,sytmtckl
equ		_rtlb_sytmmcrl,sytmmcrh
equ		_rtlb_sytmmcrw,sytmmcrl
equ		_rtlb_sytmmill,sytmmilh
equ		_rtlb_sytmmilw,sytmmill
equ		_getl_chr_bs,0x08				// asc: BS code
equ		_getl_chr_lf,0x0a				// asc: LF code
equ		_getl_chr_cr,0x0d				// asc: CR code
equ		_atoi_chr_pl,0x2b				// asc: '+' code
equ		_atoi_chr_mi,0x2d				// asc: '-' code
equ		_xtoi_chr_capa,0aa-0x20			// asc: 'A' code
# macros
macro	fldli	rn,val					// fpu: float: load constant to rn
fldi	$(rn),$(val)
endm
macro	fldwi	rn,val					// fpu: half: load constant to rn
hldi	$(rn),$(val)
endm


// uart setting: RXE, TXE, baud rate
ldwi	r7,uartbaud
ldwi	r0,fcpu/9600-1
stw		[r7],r0
ldwi	r7,uartctl
ldbiu	r0,uart_rxe|uart_txe
stw		[r7],r0

// set sp to the bottom of ram area
ldwi	r7,idrgramt
ldw		r7,[r7]
ldwi	r0,idrgrams
ldw		r0,[r0]
add		r7,r0
movtc	sp,r7

// dual core check
movfc	r0,sr
lsri	r0,sreg_b_id0
andi	r0,sreg_id_3>>sreg_b_id0
cmpi	r0,sreg_id_2>>sreg_b_id0
bne		_rtlb_core_ok
// WARNING: dual core edition is not supported, now
// cpu#2 halt, suppress errmsg
srie	0
pause
_rtlb_core_ok:

// access size check
#	cend$(z)	z="l"			z="w"
#		Mc		r0h:r0l(NOP)	r0l:r0h
#		Nh		r0hl:r0hh		r0l:r0h
ldwi	r0,0xff00						// r0={[0x00,0x00,]0xff,0x00}
cend$(z)	r0
# r0={0xff,0x00}(Mc&"l"); r0={0x00,0xff}(Mc&"w")
# r0={0x00,0xff,0x00,0x00}(Nh&"l"); r0={0x00,0x00,0x00,0xff}(Nh&"w")
# z="l": r0[7:0]=0x00
# z="w": r0[7:0]=0xff
cmpi	r0,0xff
beq		_rtlb_mcnh_ok
// Nihonium (32 bit) mode
sesr	sreg_b_nh
movfc	r0,sr
lsri	r0,sreg_b_nh
andi	r0,true
bne		_rtlb_mcnh_ok
// ERROR: not Nh
ldwi	r1,lab__rtlb_mcnh_err
jalwr7	_errmsg_r1						// Mc 16 bit mode tolerant
// halt
jmpr7	_program_halt
_rtlb_mcnh_err:
dats	"ERR: not a Nihonium core, halted.\r\n\0"
_rtlb_mcnh_ok:

// MUL check
ldbiu	r0,_rtlb_mul_need
cmpi	r0,false
beq		_rtlb_mul_ok
// try MUL instruction
ldbiu	r0,2
ldbiu	r1,1
muls	r0,r1
cmpi	r0,2
beq		_rtlb_mul_ok
// ERROR: no MUL
ldwi	r1,lab__rtlb_mul_err
jalwr7	_errmsg_r1
// halt
jmpr7	_program_halt
_rtlb_mul_err:
dats	"ERR: no MULC16 found, halted.\r\n\0"
_rtlb_mul_ok:

// DIV check
ldbiu	r0,_rtlb_div_need
cmpi	r0,false
beq		_rtlb_div_ok
// try DIV instruction
ldbiu	r0,2
ldbiu	r1,1
divs	r0,r1
cmpi	r0,2
beq		_rtlb_div_ok
// ERROR: no DIV
ldwi	r1,lab__rtlb_div_err
jalwr7	_errmsg_r1
// halt
jmpr7	_program_halt
_rtlb_div_err:
dats	"ERR: no DIVC32 found, halted.\r\n\0"
_rtlb_div_ok:

// FPU check
ldbiu	r0,_rtlb_fpu_need
cmpi	r0,false
beq		_rtlb_fpu_ok
// try FPU instruction
ldbiu	r0,0
fneg	r0,r0
clsr	sreg_b_cf
csfti	r0,1
bcc		pcnt+2
ori		r0,1
cmpi	r0,1
beq		_rtlb_fpu_ok
// ERROR: no FPU
ldwi	r1,lab__rtlb_fpu_err
jalwr7	_errmsg_r1
// halt
jmpr7	_program_halt
_rtlb_fpu_err:
dats	"ERR: no FPU found, halted.\r\n\0"
_rtlb_fpu_ok:

// clear variables
ldwi	r7,ramtop
ldwi	r1,static_va
ldbiu	r0,0
_rtlb_clrv:
st$(z)	[r7],r0
addi	r7,4
cmp		r7,r1
blo		_rtlb_clrv

// string variables
jal$(z)r7	_rtlb_vlst_cstr

// goto setup (user program entry point)
bra		_rtlb_main


// ================================
//	r0=strcpy (r0,r1);
//		r0: pointer to be copied string
//		r1: pointer to copying string
//	disturbed: r7
//		r7: temporary data
//	return: string r1 copy to r0 position
//		r0: last nil ('\0') position after copy
//		r1: last nil ('\0') position of source string r1
// ================================
align	4
_strcpy_r0_r1:
// return if r1=NULL
cmpi	r1,0
beq		_scpy_return
// loop
_scpy_loop:
ldb		r7,[r1]
addi	r1,1
stb		[r0],r7
addi	r0,1
// end of loop
cmpi	r7,0
bne		_scpy_loop
subi	r0,1
subi	r1,1
// end of subroutine
_scpy_return:
rtn$(z)

// ================================
//	r0=strdec (r0,r1);
//		r0: pointer to be copied string
//		r1: decimal number to convert to string
//	disturbed: r1~r4,r7
//		r1: decimal number to convert to string
//		r2: power of 10
//		r3: omit leading zero flag
//		r4: quotient of r1/r2
//		r7: read pointer to power of 10 table
//	return: string copy decimal r1 to r0 position as text
//		r0: last nil ('\0') position after copy
// ================================
align	4
_strdec_r0_r1:
cmpi	r1,0
bne		_sdec_not_0
// 0
ldbiu	r1,0a0
stb		[r0],r1
addi	r0,1
ldbiu	r2,0
bra		_sdec_return
_sdec_not_0:
// negative value?
bpl		_sdec_not_nega
ldbiu	r4,_atoi_chr_mi
stb		[r0],r4
addi	r0,1
neg		r1
_sdec_not_nega:
// for each r2=1000000000 ~ 1
ldwi	r7,lab__sdec_tab$(z)
ldbiu	r3,true							// omit leading zero flag
_sdec_loop:
ld$(z)	r2,[r7]
cmpi	r2,0
beq		_sdec_break
// r4=r1/r2
ldbiu	r4,0
_sdec_div:
sub		r1,r2
blo		pcnt+4
addi	r4,1
bra		_sdec_div
// omit leading zero
cmpi	r3,false
beq		pcnt+4
cmpi	r4,0
beq		_sdec_omit
// copy 1 digit
addi	r4,0a0
stb		[r0],r4
addi	r0,1
ldbiu	r3,false
_sdec_omit:
// add back r1; loop
add		r1,r2
addi	r7,4
bra		_sdec_loop
_sdec_break:
// end of subroutine
_sdec_return:
stb		[r0],r2
rtn$(z)

align	4
_sdec_tabl:
datl	1000000000
datl	100000000
datl	10000000
datl	1000000
datl	100000
datw	0
_sdec_tabw:
datw	10000
datl	1000
datl	100
datl	10
datl	1
datl	0

// ================================
//	r0=strhex (r0,r1,r2);
//		r0: pointer to be copied string
//		r1: hexadecimal number to convert to string
//		r2: number of hexadecimal string columns (0~8)
//	disturbed: r2~r3,r7
//		r2: right shift amount (<=0)
//		r3: temporary data
//		r7: table pointer to the hexadecimal digits
//	return: string copy r2 columns hexadecimal r1 to r0 position as text
//		r0: last nil ('\0') position after copy
// ================================
align	4
_strhex_r0_r1_r2:
// columns to bit shift amount
cmpi	r2,8
blo		pcnt+2
ldbiu	r2,8
lsli	r2,2
neg		r2
// loop
ldwi	r7,lab__shex_hexdig				// +16: for capital digits (A~F)
_shex_loop:
cmpi	r2,0
beq		_shex_break
// convert nibble
addi	r2,4
mov		r3,r1
lsft	r3,r2
andi	r3,0x0f
add		r3,r7
ldb		r3,[r3]
// end of loop
stb		[r0],r3
addi	r0,1
bne		_shex_loop
_shex_break:
// end of subroutine
stb		[r0],r2
rtn$(z)

_shex_hexdig:
dats	"0123456789abcdef0123456789ABCDEF"

// ================================
//	r0=strlen (r1);
//		r1: pointer to string for counting length
//	disturbed: r7
//		r7: temporary data
//	return: string r1 copy to r0 position
//		r0: length of string r1
//		r1: last nil ('\0') position of source string r1
// ================================
align	4
_strlen_r1:
ldbiu	r0,0
// loop
_slen_loop:
// get character
ldb		r7,[r1]
addi	r1,1
// count
addi	r0,1
// check nil code
cmpi	r7,0
bne		_scpy_loop
subi	r0,1
subi	r1,1
rtn$(z)

// ================================
//	r0=strcmp (r1,r2);
//		r1,r2: pointer to the string for compare
//	disturbed: r3,r4
//		r3,r4: temporary character code
//	return: string compare
//		r0: result (=r1 - r2)
//		r1,r2: 1st differential or nil ('\0') position
// ================================
align	4
_strcmp_r1_r2:
// loop
_scmp_loop:
// get character
ldb		r3,[r1]
addi	r1,1
ldb		r4,[r2]
addi	r2,1
// compare
mov		r0,r3
sub		r0,r4
bne		_scmp_break
// check nil code
cmpi	r3,0
beq		_scmp_break
cmpi	r4,0
bne		_scmp_loop
_scmp_break:
subi	r1,1
subi	r2,1
rtn$(z)

// ================================
//	r0=strfcmp (r1,r2);
//		r1,r2: pointer to the string for compare
//	disturbed: r3,r4
//		r3,r4: temporary character code
//	return: string forward match compare
//			if left(r1,strlen(r2)) equal to r2 then match
//			if strlen(r1)<strlen(r2) then always mismatch
//		r0: result (=r1 - r2)
//		r1,r2: 1st differential or last position
// ================================
align	4
_strfcmp_r1_r2:
ldbiu	r0,0
// loop
_scmf_loop:
// get character
ldb		r3,[r1]
addi	r1,1
ldb		r4,[r2]
addi	r2,1
// check nil code
cmpi	r4,0
beq		_scmf_break
// compare
mov		r0,r3
sub		r0,r4
beq		_scmf_loop
_scmf_break:
subi	r1,1
subi	r2,1
rtn$(z)

// ================================
//	r0=strchr (r0,r1);
//		r0: pointer to the string
//		r1: character code to find
//	disturbed: r2,r3
//		r2: string pointer backup
//		r3: temporary character code
//	return: offset to 1st character found in string
//		r0: -1 (not found) / 0~ (1st character position)
// ================================
align	4
_strchr_r0_r1:
// string pointer backup
mov		r2,r0
// loop
_stch_loop:
// get character
ldb		r3,[r0]
addi	r0,1
// check nil code
cmpi	r3,0
beq		_stch_notf
// compare
cmp		r3,r1
bne		_stch_loop
bra		_stch_return

_stch_notf:
mov	r0,r2
_stch_return:
subi	r0,1
sub		r0,r2
rtn$(z)

// ================================
//	r1=strofst (r1,r0);
//		r1: pointer to the string
//		r0: offset to r1
//	disturbed: r0,r2
//		r0: temporary offset
//		r2: temporary character code
//	return: offset pointer r1 + r0; limited range 0<=r0<=strlen(r1)
//		r1: r1 + r0
// ================================
align	4
_strofst_r1_r0:
// loop
_sofs_loop:
// get character
ldb		r2,[r1]
// check nil code
cmpi	r2,0
beq		_sofs_break
// check offset
cmpi	r0,1
blt		_sofs_break
// end of loop
subi	r0,1
addi	r1,1
bra		_sofs_loop
_sofs_break:
rtn$(z)

// ================================
//	print_chr (r0);
//		r0: character code to print
//	disturbed: r2,r7
//		r2: flag data for polling
//		r7: i/o register address
//	return: print character r0 to the UART
// ================================
align	4
_print_chr_r0:
$(s)// ********************************
$(s)ldwi	r7,princhr
$(s)stw		[r7],r0
$(s)rtn$(z)
$(s)// ********************************
// polling uartctl[TFUL]=0
ldwi	r7,uartctl
_prnc_poll:
ldw		r2,[r7]
andi	r2,uart_tful
bne		_prnc_poll
// send data
ldwi	r7,uarttdat
stw		[r7],r0
// end of subroutine
rtn$(z)

// ================================
//	print (r1);
//		r1: pointer to the string for print
//	disturbed: r0,r2,r7
//		r0: temporary data
//		r2: used in _print_chr_r0 subroutine
//		r7: temporary pointer
//	return: print text r1 to the UART
//		r1: point to the next address of nil ('\0')
// ================================
align	4
_print_r1:
_prnt_loop:
// get 1 byte
ldb		r0,[r1]
addi	r1,1
cmpi	r0,0
beq		_prnt_break
jal$(z)r7	_print_chr_r0
bra		_prnt_loop
_prnt_break:
// end of subroutine
rtn$(z)

// ================================
//	digitalWrite (r0,r1);
//		r0: i/o port number to write (0~15)
//		r1: logic level 0 / 1
//	disturbed: r0~r3,r7
//		r0: temporary data
//		r1,r2: bit position
//		r3: offset address port#0 ==> #1
//		r7: i/o register address
//	return: digital write logic level r1 to i/o port r0
// ================================
align	4
_digital_write_r0_r1:
// port #0 or #1
ldbiu	r3,0
cmpi	r0,8
blo		pcnt+4
subi	r0,8
ldbiu	r3,0xb0							// offset address port#0 ==> #1
// i/o port ==> bit position
cmpi	r1,0
beq		pcnt+2
ldbiu	r1,1
lsft	r1,r0
ldbiu	r2,1
lsft	r2,r0
not		r2
// set output port
ldwi	r7,pordir
add		r7,r3
ldw		r0,[r7]
and		r0,r2
stw		[r7],r0
// set output data
ldwi	r7,porout
add		r7,r3
ldw		r0,[r7]
and		r0,r2
or		r0,r1
stw		[r7],r0
// end of subroutine
rtn$(z)

// ================================
//	digitalRead (r0);
//		r0: i/o port number to read (0~15)
//	disturbed: r1,r3,r7
//		r1: bit position
//		r3: offset address port#0 ==> #1
//		r7: i/o register address
//	return: digital read from i/o port r0
//		r0: logic level 0 / 1
// ================================
align	4
_digital_read_r0:
// port #0 or #1
ldbiu	r3,0
cmpi	r0,8
blo		pcnt+4
subi	r0,8
ldbiu	r3,0xb0							// offset address port#0 ==> #1
// i/o port ==> bit position
ldbiu	r1,1
lsft	r1,r0
// read input data
ldwi	r7,porsel
add		r7,r3
ldw		r0,[r7]
or		r0,r1
stw		[r7],r0
ldwi	r7,porin
add		r7,r3
ldw		r0,[r7]
and		r0,r1
beq		pcnt+2
ldbiu	r0,1
// end of subroutine
rtn$(z)

// ================================
//	delay (r0);
//		r0: delay period [ms]
//	disturbed: r1,r7,sytmctl
//		r1: temporary data
//		r7: i/o register address
//	return: delay r0 [ms]
// ================================
align	4
_delay_ms_r0:
$(s)// ********************************
$(s)lsri	r0,6						// reduce period 1/64 for simulation
$(s)// ********************************
ldwi	r7,sytmctl
ldbiu	r1,sytm_mloe
stw		[r7],r1
ldwi	r7,_rtlb_sytmmil$(z)
ld$(z)	r1,[r7]
cmp		r1,r0
blo		pcnt-6
ldwi	r7,sytmctl
ldbiu	r1,0
stw		[r7],r1
// end of subroutine
rtn$(z)

// ================================
//	delayMicroseconds (r0);
//		r0: delay period [us]
//	disturbed: r1,r7,sytmctl
//		r1: temporary data
//		r7: i/o register address
//	return: delay r0 [us]
// ================================
align	4
_delay_us_r0:
$(s)// ********************************
$(s)lsri	r0,4						// reduce period 1/16 for simulation
$(s)// ********************************
ldwi	r7,sytmctl
ldbiu	r1,sytm_mcoe
stw		[r7],r1
ldwi	r7,_rtlb_sytmmcr$(z)
ld$(z)	r1,[r7]
cmp		r1,r0
blo		pcnt-6
ldwi	r7,sytmctl
ldbiu	r1,0
stw		[r7],r1
// end of subroutine
rtn$(z)

// ================================
//	r0=atoi (r1);
//		r1: pointer to decimal string
//	disturbed: r1~r4
//		r1: pointer to decimal string
//		r2,r3: temporary data
//		r4: negative(false) / positive(true)
//	return: ascii to integer
//		r0: atoi (r1)
// ================================
align	4
_atoi_r1:
ldbiu	r0,0
ldbiu	r4,true							// positive
// sign [+-]
ldb		r2,[r1]
cmpi	r2,_atoi_chr_mi
bne		_atoi_not_minu
// minus
ldbiu	r4,false						// negative
addi	r1,1
bra		_atoi_loop
_atoi_not_minu:
cmpi	r2,_atoi_chr_pl
bne		_atoi_loop
// plus, ignore
addi	r1,1
// loop
_atoi_loop:
// r2=[r1]-'0'
ldb		r2,[r1]
subi	r2,0a0
blo		_atoi_break
cmpi	r2,10
bhs		_atoi_break
// r0=10*r0+r2
mov		r3,r0
lsli	r3,3
add		r0,r0
add		r0,r3
add		r0,r2
// end of loop
addi	r1,1
bra		_atoi_loop
_atoi_break:
// sign
cmpi	r4,false
bne		pcnt+2
neg		r0
// end of subroutine
rtn$(z)

// ================================
//	r0=xtoi (r1);
//		r1: pointer to hexadecimal string
//	disturbed: r1,r2
//		r1: pointer to hexadecimal string
//		r2: temporary data
//	return: hexadecimal to integer
//		r0: xtoi (r1)
// ================================
align	4
_xtoi_r1:
ldbiu	r0,0
// loop
_xtoi_loop:
// r2=[r1]-'0'
ldb		r2,[r1]
subi	r2,0a0
blo		_xtoi_break						// [r1]<'0'
cmpi	r2,10
blo		_xtoi_next						// [r1]<='9'
subi	r2,_xtoi_chr_capa-0a0-10
blo		_xtoi_break						// [r1]<'A'
cmpi	r2,16
blo		_xtoi_next						// [r1]<='F'
subi	r2,0aa-_xtoi_chr_capa
blo		_xtoi_break						// [r1]<'a'
cmpi	r2,16
bhs		_xtoi_break						// [r1]>'f'
_xtoi_next:
// r0=16*r0+r2
lsli	r0,4
add		r0,r2
// end of loop
addi	r1,1
bra		_xtoi_loop
_xtoi_break:
// end of subroutine
rtn$(z)

// ================================
// r0,r1=getline (r0)
//		r0: pointer to line buffer (size of _str_siz [byte])
//	disturbed: r2,r6,r7
//		r2: temporary data
//		r6: i/o register uartctl
//		r7: i/o register uartdat
//	return: get a line data from UART with BS code handling
//		r0: pointer to last nil ('\0') code
//		r1: pointer to line buffer (size of _str_siz [byte])
// ================================
align	4
_getline_r0:
ldwi	r7,uartrdat
ldwi	r6,uartctl
mov		r1,r0
_getl_loop:
// check baud rate detection
jal$(z)r2	_getl_det_baud
// polling until RAVL=1
ldw		r2,[r6]
andi	r2,uart_ravl
beq		_getl_loop
// get byte
ldw		r2,[r7]
stb		[r0],r2
addi	r0,1
// LF code check
cmpi	r2,_getl_chr_lf
beq		_getl_got
// BS code check
cmpi	r2,_getl_chr_bs
bne		_getl_bs_endif
subi	r0,2
cmp		r0,r1
bhs		_getl_bs_endif
mov		r0,r1
_getl_bs_endif:
// size check
ldwi	r2,_str_siz-1
add		r2,r1
cmp		r0,r2
blo		_getl_loop
addi	r0,1
// got line
_getl_got:
// string terminate
ldbiu	r2,0
subi	r0,1
stb		[r0],r2
// CR code check
subi	r0,1
ldb		r2,[r0]
addi	r0,1
cmpi	r2,_getl_chr_cr
bne		_getl_notcr
ldbiu	r2,0
subi	r0,1
stb		[r0],r2
_getl_notcr:
rtn$(z)

// ================================
// baud rate detection
//	disturbed: none
//	return: none
// ================================
align	4
_getl_det_baud:
push$(z)m	r0,r1,r2,r3,r4,r5,r6,r7
ldwi	r7,uartctl
ldw		r0,[r7]
stw		[r7],r0							// clear brdf
andi	r0,uart_brdf
beq		_detb_not_brdf
// detected
ldwi	r7,uartbres
ldw		r0,[r7]
ldwi	r7,uartbaud
ldw		r3,[r7]
// margin
mov		r2,r3
lsri	r2,6
// r3=abs (r3 - r0)
$(s)// ********************************
$(s)lsli	r3,1
$(s)// ********************************
sub		r3,r0
bpl		_detb_plus
neg		r3
_detb_plus:
cmp		r3,r2
blo		_detb_not_brdf
// update uartbaud
stw		[r7],r0
// message
ldwi	r1,lab__detb_str_msg_det
jal$(z)r7	_print_r1
// return new baud rate detected
ldwi	r7,uartbres
ldw		r0,[r7]
bra		_detb_not_brdf+2
// end of subroutine
_detb_not_brdf:
ldbiu	r0,0
pop$(z)m	r7,r6,r5,r4,r3,r2,r1,r0
rtn$(z)

_detb_str_msg_det:
dats	"OK: new baud rate detected.\r\n\0"

// ================================
//	errmsg (r1);
//		r1: pointer to the string for print
//	disturbed: r0,r2,r7
//		r0: temporary data
//		r2: used in _print_chr_r0 subroutine
//		r7: temporary pointer
//	return: print error message r1 to the UART (Mc 16 bit mode tolerant)
//		r1: point to the next address of nil ('\0')
// ================================
align	4
_errmsg_r1:
// loop
_errm_loop:
// get 1 byte
ldb		r0,[r1]
addi	r1,1
cmpi	r0,0
beq		_errm_break
// print character
$(s)// ********************************
$(s)ldwi	r7,princhr
$(s)stw		[r7],r0
$(s)bra		_errm_loop
$(s)// ********************************
// polling uartctl[TFUL]=0
ldwi	r7,uartctl
_errm_poll:
ldw		r2,[r7]
andi	r2,uart_tful
bne		_errm_poll
// send data
ldwi	r7,uarttdat
stw		[r7],r0
// end of loop
bra		_errm_loop
_errm_break:
// end of subroutine
rtnw

// ================================
//	halt;
// ================================
align	4
_program_halt:
// send message
ldwi	r1,lab__prgh_message
jalwr7	_errmsg_r1						// Mc 16 bit mode tolerant
// halt
$(s)// ********************************
$(s)ldwi	r0,simneut
$(s)ldwi	r7,simfnsh
$(s)stw		[r7],r0
$(s)// ********************************
srie	0
pause

_prgh_message:
dats	"WRN: program encountered a halt code.\r\n\0"


// end of run time library
datw	_rtlb_vers

align	4
_rtlb_main:

