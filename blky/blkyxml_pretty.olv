model	"Blockly.XML pretty printer"
{
// ================================
//
//	Blockly.XML pretty printer
//		(c) 2024	1YEN Toru
//
//
//		2024/10/19	ver.1.04
//			add: out4dif
//
//		2024/10/12	ver.1.02
//			corresponding to S-JIS encoding XML
//
//		2024/08/31	ver.1.00
//
// ================================


	// constants
	var		out4dif=false;				// output for diff tools
	macro	str_indt="	";				// indent string


	// variables
	var		id_num;						// serial ID number
	macro	dir,mynam,ext;
	pathsplit	$(pathname), dir,mynam,ext;


	// input file name
	var		rtn;
	macro	fnam;
	macro	fnam_in;
	macro	fnam_out;
	macro	fnam_tmp;
	gui		openfile, rtn, "Input File","",fnam_in;
	if (rtn=guiCancel)
	{
		// cancelled; select default source
		pathsplit	$(pathname), dir,fnam,ext;
		mlet	fnam_in=$(dir)$/$(fnam)".txt";
		ifnacc	$(fnam_in)
		{
			// cancelled; default source not found
			leave	stop_error;
		}
	}
	pathsplit	$(fnam_in), dir,fnam,ext;
	mlet	fnam_out=$(dir)$/$(fnam)"_out.xml";


	// procedures
	procedure	fget_sjis
	{
		// If cod is within the range of the first byte of S-JIS code,
		//	read the second byte.
		if (0x81<=cod & cod<0xa0 | 0xe0<=cod & cod<0xfd)
		{
			var		cod2;

			fgetb	fin,cod2;
			cod=@((cod<<8) + cod2);
		}
	}
	procedure	fget_xml
	{
		// get string between "<" ~ ">"
		//	If the first character is not "<", extract up to the next "<".
		var		cmp;
		var		cod;
		macro	chr;

		ftell	fin,fpos;
		progress	"Converting...",100*fpos/fsiz;

		// read
		fgetb	fin,cod;
		fget_sjis;
		num2chr		chr=cod;
		strcmp	cmp="<",$(chr);
		if (cmp=0)
		{
			// "<" ~ ">"
			repeat
			{
				strcat	fget_xml, $(chr);
				fgetb	fin,cod;
				fget_sjis;
				if (cod<0)
				{
					// ERROR:
					fget_xml=cod;
					break;
				}
				num2chr		chr=cod;
				strcmp	cmp=">",$(chr);
			} until (cmp=0);
			strcat	fget_xml, $(chr);
		}
		else
		{
			// to the next "<"
			var		fpos;

			repeat
			{
				strcat	fget_xml, $(chr);
				ftell	fin,fpos;
				fgetb	fin,cod;
				fget_sjis;
				if (cod<0)
				{
					// ERROR:
					fget_xml=cod;
					break;
				}
				if (cod=0x0a)
				{
					mlet	chr=$,;
				}
				else
				{
					num2chr		chr=cod;
				}
				strcmp	cmp="<",$(chr);
			} until (cmp=0);
			fseek	fin,fpos;
			// ignore newline and indentation
			psub	"^"$," *$","",fget_xml;
			// replace newline with "\n"
			gsub	$,,"\n",fget_xml;
		}
		// remove unnecessary items
		pgsub	"\\"$",$",fget_xml;
		// tag
		pindex	cmp=$(fget_xml),"^<[^>]*>$";
		if (cmp>0)
		{
			if (out4dif)
			{
				pgsub	" id="$""[^"$""]*"$","",fget_xml;
				pgsub	" x="$""[^"$""]*"$","",fget_xml;
				pgsub	" y="$""[^"$""]*"$","",fget_xml;
			}
			else
			{
				pgsub	" id="$""[^"$""]*"$"," id="$"#(id_num)$",fget_xml;
			}
			if (status>0)
			{
				id_num=id_num + 1;
			}
		}
		// except tag
		pindex	cmp=$(fget_xml),"^<";
		if (cmp<=0)
		{
//			gsub	"&#9;","\t",fget_xml;
//			gsub	"&#10;","\n",fget_xml;
//			gsub	"&gt;",">",fget_xml;
//			gsub	"&lt;","<",fget_xml;	// do not convert
//			gsub	"&amp;","&",fget_xml;
		}
		// exit when a read error occurs
		if (fget_xml)
		{
			// error injection
			mlet	fget_xml="<error>";
		}
		// If empty string, read the next one
		//	(the above error processing should be done first)
		strcmp	cmp=$(fget_xml),"";
		if (cmp=0)
		{
			fget_xml;
		}
if (false)
{
	macro	tmp=$(fget_xml);
	pgsub	"#","##",tmp;
	fprint	fout,"##fget_xml:"$(tmp)$,;
}
	}
	procedure	indent	nindt
	{
		var		idx;

		if (nindt<0)
		{
			nidnt=0;
		}
		while (idx<nindt)
		{
			fprint	fout,$(str_indt);

			// continue
			idx=idx + 1;
		}
	}
	procedure	do_xml
	{
		var		cmp;
		var		nindt;

		fget_xml;
		while (fget_xml>=0)
		{
			strcmp	cmp=$(fget_xml),"";
			if (cmp=0)
			{
				// continue
				fget_xml;
				continue;
			}

			pindex	cmp=$(fget_xml),"^</";
			if (cmp<=0)
			{
				pindex	cmp=$(fget_xml),"^<next[ >]";
			}
			if (cmp>0)
			{
				pindex	cmp=$(fget_xml),"^</next[ >]";
				if (cmp<=0)
				{
					nindt=nindt - 1;
				}
			}

			strcmp	cmp=$(fget_xml),"<",left;
			if (true | cmp=0)
			{
				indent	nindt;
			}
			pgsub	"#","##",fget_xml;
			gsub	"&lt;","<",fget_xml;
			fprint	fout,$(fget_xml)$,;

			pindex	cmp=$(fget_xml),"^<[^/].*[^/]>$";
			if (cmp<=0)
			{
				pindex	cmp=$(fget_xml),"^</next[ >]";
			}
			if (cmp>0)
			{
				pindex	cmp=$(fget_xml),"^<next[ >]";
				if (cmp<=0)
				{
					nindt=nindt + 1;
				}
			}

			// continue
			fget_xml;
		}
	}


	// open files
	var		fin;
	var		fout;
	fopen	fin,$(fnam_in),"r";
	fopen	fout,$(fnam_out),"w";

	var		fpos,fsiz;
	fseek	fin,-1;
	ftell	fpos,fsiz;
	fseek	fin,0;

	if (out4dif)
	{
		mlet	str_indt="";			// no indent
	}

	do_xml;


	// close files
	fclose	fin;
	fclose	fout;


	leave	stop_error;
}

